/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RequestApplet.java
 *
 * Created on 11/02/2011, 11:16:19 AM
 */

package Applet;

import java.io.*;
import java.security.*;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import netscape.javascript.JSObject;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

/**
 *
 * @author ISA
 */
public class ImportApplet extends javax.swing.JApplet {

    /** Initializes the applet RequestApplet */
    @Override
    public void init() {
        Security.addProvider(new BouncyCastleProvider());
        this.initComponents();
    }

    private void desplegarFinalizado() {
        JSObject win = (JSObject) JSObject.getWindow(this);
        win.eval("desplegarFinalizado()");
    }

    private void desplegarError(String error) {
        JSObject win = (JSObject) JSObject.getWindow(this);
        win.eval("desplegarError(\""+error+"\")");
    }

    private String validarEntradas() {
        JSObject win = (JSObject) JSObject.getWindow(this);
        return (String) win.eval("validarEntradas()");
    }

    private char[] getPasswordAnt() {
        JSObject win = (JSObject) JSObject.getWindow(this);
        String aRet = (String) win.call("getPasswordAnt",null);
        return aRet.toCharArray();
    }

    private char[] passwordNew() {
        JSObject win = (JSObject) JSObject.getWindow(this);
        String aRet = (String) win.call("passwordNew",null);
        return aRet.toCharArray();
    }
    
    private String getArchivo() {
        //JSObject win = (JSObject) JSObject.getWindow(this);
        //String aRet = (String) win.call("getArchivo",null);
        String aRet = jTextField1.getText();
        return aRet;
    }
    
    private String obtenerKeystorePath(){
        String path;
        if (isOSWindows()){
            path = System.getenv("APPDATA")+"/IGDoc";
            path = path.replace("\\", "/");
        }else{
            path = System.getProperty("user.home")+"/.IGDoc";
            path = path.replace("\\", "/");
        }
        return path;
    }

    private KeyStore obtenerKeyStore() throws KeyStoreException, FileNotFoundException, IOException, NoSuchAlgorithmException, CertificateException, NoSuchProviderException{
        String path = obtenerKeystorePath()+"/almacenIGDOC";
        KeyStore aRet = KeyStore.getInstance("jks");
        File myDir = new File(path);
        if( myDir.exists() ){
            FileInputStream in= new FileInputStream(path);
            aRet.load(in, "default".toCharArray());
            in.close();
        }else{
            aRet.load(null,null);
        }
        return aRet;
    }
    
    private void guardarKeyStore(KeyStore ks) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException{
        String path = obtenerKeystorePath();
        File myDir = new File(path);
        if( !myDir.exists() ){
            myDir.mkdir();
        }
        FileOutputStream out = new FileOutputStream(path+"/almacenIGDOC");
        ks.store(out, "default".toCharArray());
        out.close();
    }

    public static boolean isOSWindows() {
        return (System.getProperty("os.name").toLowerCase().startsWith("win"));
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 200));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField1.setEnabled(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 150, -1));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton1.setText("Importar certificado");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        jButton1.setPreferredSize(new java.awt.Dimension(155, 21));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, -1, -1));

        jButton2.setText("Examinar...");
        jButton2.setPreferredSize(new java.awt.Dimension(90, 20));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            if(validarEntradas().equals("SI")){
                KeyStore ks = this.obtenerKeyStore();

                FileInputStream fi = new FileInputStream(new File(getArchivo()));

                KeyStore ksP12 = KeyStore.getInstance("PKCS12");
                ksP12.load(fi, getPasswordAnt());

                Enumeration<String> aliases = ksP12.aliases();
                if(aliases.hasMoreElements()){
                    String alias = aliases.nextElement();
                    X509Certificate certFirmado = (X509Certificate) ksP12.getCertificate(alias);
                    PrivateKey privada = (PrivateKey) ksP12.getKey(alias, getPasswordAnt());

                    ks.setCertificateEntry(certFirmado.getSerialNumber().toString(), certFirmado);

                    ks.setKeyEntry(certFirmado.getSerialNumber().toString(), privada, passwordNew(), new Certificate[]{certFirmado});

                    guardarKeyStore(ks);
                    
                    desplegarFinalizado();
                }else{
                    desplegarError("El archivo seleccionado no contiene ningún certificado.");  
                }
            }
        } catch (UnrecoverableKeyException ex) {
            Logger.getLogger(ImportApplet.class.getName()).log(Level.SEVERE, null, ex);
            desplegarError("La contraseña ingresada es incorrecta.");
        } catch (KeyStoreException ex) {
            Logger.getLogger(ImportApplet.class.getName()).log(Level.SEVERE, null, ex);
            desplegarError("El certificado que intenta instalar ya se encuentra instalado.");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ImportApplet.class.getName()).log(Level.SEVERE, null, ex);
            desplegarError("No se encontró el archivo seleccionado");
        } catch (IOException ex) {
            Logger.getLogger(ImportApplet.class.getName()).log(Level.SEVERE, null, ex);
            if(ex.getCause()!= null && ex.getCause().getClass().getName().equals("UnrecoverableKeyException")){
                desplegarError("No se pudo abrir el archivo seleccionado, la contraseña es incorrecta.");
            }else{
                desplegarError("No se pudo abrir el archivo seleccionado.");
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ImportApplet.class.getName()).log(Level.SEVERE, null, ex);
            desplegarError("Error al importar el certificado.");
        } catch (CertificateException ex) {
            Logger.getLogger(ImportApplet.class.getName()).log(Level.SEVERE, null, ex);
            desplegarError("Error al importar el certificado.");
        } catch (NoSuchProviderException ex) {
            Logger.getLogger(ImportApplet.class.getName()).log(Level.SEVERE, null, ex);
            desplegarError("Error al importar el certificado.");
        } catch (Exception ex) {
            Logger.getLogger(ImportApplet.class.getName()).log(Level.SEVERE, null, ex);
            desplegarError("Error al importar el certificado.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser chooser = new JFileChooser();
        int status = chooser.showSaveDialog(jPanel1);
        if(status == JFileChooser.APPROVE_OPTION){
            File saveFile = chooser.getSelectedFile();
            String savePath = saveFile.getAbsolutePath();
            jTextField1.setText(savePath);
        }else{
            jTextField1.setText("");
        }
    }//GEN-LAST:event_jButton2ActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
